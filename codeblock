#include <LiquidCrystal.h>
#include <SoftwareSerial.h>
LiquidCrystal lcd(2, 3, 4, 10, 11, 12, 13);
SoftwareSerial mySerial(5, 6); // RX and TX signals for connection

char m_num_my[] = {"+91xxxxxxxxxx"};
char* m_num_help[] = {"+91xxxxxxxxxx"};//Here change x values into Mobile Number to send
char Rec_Data = 0;
int msg_flg = 0;
byte msg_flag_2 = 0;
byte call_flag = 0;
byte reply_flag = 0;
byte delete_flag = 0;
byte d_count = 0;
byte i = 0;
byte j = 0;
char number[15];
char message[160];
char* send_msg[] = {"I am at this location:-)",
                    "Thank u, I feel relaxed now :-)",
                    "Dont worry, I will inform u if anything happens to me ;-)",
                    "HELP, I am moved..plz check me out:-(",
                    "I am DEAD ;-(",
                    "I am LIVE again, Thank u :-)",
                    "I dont RECOGNIZE this command :-/",
                   };
byte alert = 0;
int  m_x1 = 0, m_y1 = 0, m_z1 = 0, k = 0;
byte p = 0;
byte moved = 0;
int loop_1 = 0;
int Gpsdata;             // for incoming serial data
unsigned int finish = 0; // indicate end of message
unsigned int pos_cnt = 0; 
unsigned int lat_cnt = 0; // latitude data counter
unsigned int log_cnt = 0; // longitude data counter
unsigned int flg = 0;    
unsigned int com_cnt = 0; // comma counter
char lat[20];            // it specifies lattitude values
char lg[20];             // it specifies longitude values

//connections for accelerometer
const int xpin = A5;                  // x-axis of the accelerometer
const int ypin = A4;                  // y-axis of the accelerometer
const int zpin = A3;                  // z-axis of the accelerometer

void modem_initialization(void);
void Accident_send_message(void);
void send_message(void);
void clear_rx_buffer(void);
void accelerometer(void);
void command_match(void);
void Receive_GPS_Data();

void setup()
{
  delay(1000);
  Serial.begin(9600);//start serial port at baud rate of 9600
  mySerial.begin(9600); //Activate softserial communication port

  lcd.begin(16, 2);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("    GrayBOX    ");
  delay(2000);
  modem_initialization();
  lcd.setCursor(0, 0);
  lcd.print("GSM Initialised");
  delay(1000);

  pinMode(7, OUTPUT);
  digitalWrite(7, HIGH);   // turn the SPARK PLUG on (HIGH is the voltage level)
}

void loop()
{
  accelerometer();
  gsm_read_message();//wait for message or call
  if ( reply_flag == 1 ) //only if valid message received
  {
    command_match();
    reply_flag = 0;
  }
}

 void command_match(void)
{
  if ((strcmp(message, "alert") == 0) || (strcmp(message, "ALERT") == 0))
  {
    j = 2;
    alert = 1;
    p = 0;
    send_message();

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("ALERT MODE");
  }
  else if ((strcmp(message, "relax") == 0) || (strcmp(message, "RELAX") == 0))
  {
    alert = 0;
    j = 1;
    send_message();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("RELAX MODE");
  }
  else if ((strcmp(message, "stop") == 0) || (strcmp(message, "STOP") == 0))
  {
    digitalWrite(7, LOW);
    delay(50);
    j = 4;
    send_message();

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("KILL ENGINE");
  }
  else if ((strcmp(message, "run") == 0) || (strcmp(message, "RUN") == 0))
  {
    digitalWrite(7, HIGH);
    delay(50);
    j = 5;
    send_message();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("ENGAGE ENGINE");
  }
  else if (strcmp(message, "?") == 0)
  {
    j = 0;
    send_message();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("TRACKING VEHICLE");
  }
  else
  {
    j = 6;
    send_message();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("FALSE COMMAND");
  }
}

  /*
This function used to detect accident
*/

  void accelerometer(void)
{
  int alert_x = 0, alert_y = 0, alert_z = 0, m_x = 0, m_y = 0, m_z = 0;
  int X = 0 , Y = 0 , Z = 0;            // variables for storing the o/p of ACCELEROMETER

  X = analogRead(xpin);
  delay(10);
  Y = analogRead(ypin);
  delay(10);
  Z = analogRead(zpin);
  delay(10);

  /*  Serial.print(X);
    Serial.print(" ");
    Serial.print(Y);
    Serial.print(" ");
    Serial.print(Z);
    Serial.println();*/

  if ( alert == 1)
  {
    for (k = 0; k < 5; k++)
    {
      alert_x = alert_x + X;
      alert_y = alert_y + Y;
      alert_z = alert_z + Z;
    }
    m_x = alert_x / 5;
    m_y = alert_y / 5;
    m_z = alert_z / 5;

    /*Serial.print(m_x);
     Serial.print(" ");
     Serial.print(m_y);
     Serial.print(" ");
     Serial.print(m_z);
     Serial.println();
    delay(1000);*/

    loop_1++;
    if (p == 1)
    {
      if ((m_x1 - m_x > 5) || (m_y1 - m_y > 5) || (m_z1 - m_z > 5) || (m_x - m_x1 > 5) || (m_y - m_y1 > 5) || (m_z - m_z1 > 5))
      {
        moved++;
        if (loop_1 < 12 && moved > 0)
        {
          moved = 0;
        }
        else
        {
          j = 3;
          send_message();
          alert = 0;
          lcd.setCursor(0, 0);
          lcd.print("Vehicle moved");
        }
      }
    }

    m_x1 = m_x;
    m_y1 = m_y;
    m_z1 = m_z;

    p = 1;

  }

  if (Z <= 370)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("    ACCIDENT    ");
    lcd.setCursor(0, 1);
    lcd.print("    Detected    ");
    delay(1000);
    Accident_send_message();
  }
}
/*
 This funtion used to send HELP message to others
 
 */
 void Accident_send_message(void)
{
  //  byte send_flag = 1;
  byte msg_flg = 0;
  char rec_data = 0;

  Receive_GPS_Data();
  for ( i = 0; i < 1; i++)
  {
    delay(1000);
    Serial.print("AT+CMGS=");//Command to send message ,(AT+CMGS="+91phone number"<enter>)
    Serial.print('"');
    Serial.print(m_num_help[i]);
    Serial.println('"');
    delay(500);//Delay for GSM module become ready
    while (Serial.available() > 0)
    {
      rec_data = Serial.read();
      if ( rec_data == '>'  ) // '>'(greater than symbol) is recieved while message sending,after AT+CMGD="number" command
      {

        delay(400);//Delay for GSM module become ready
        Serial.println("Help, I am in an ACCIDENT");//Transmiting SMS string
        Serial.print("Latitude : ");
        Serial.println(lat);
        Serial.print("Longitude : ");
        Serial.println(lg);
        Serial.println("From - GrayBOX"); //Transmitting whole string to be sent as SMS
        Serial.write(26);//'ctrl+z' command

        delay(1000);//Delay for GSM module become ready

        msg_flg = 0;
      }
      else if ( rec_data == '+' && msg_flg == 0 ) // '+' is recieved
        msg_flg = 1 ;
      else if ( rec_data == 'C' && msg_flg == 1 ) // 'C' is recieved
        msg_flg = 2 ;
      else if ( rec_data == 'M' && msg_flg == 2 ) // 'M' is recieved
        msg_flg = 3 ;
      else if ( rec_data == 'G' && msg_flg == 3 ) // 'M' is recieved
        msg_flg = 4 ;
      else if ( rec_data == 'S' && msg_flg == 4 )//// 'S' is recieved after a sucessful message ("+CMSGS:  ")
        msg_flg = 5 ;
      else if ( rec_data == ':' && msg_flg == 5 )// ':' is recieved
        msg_flg = 6 ;
      else if ( rec_data == 0x0D && msg_flg == 6 )//Carriage return
        msg_flg = 7 ;
      else if ( rec_data == 0x0A && msg_flg == 7 )//Line feed
        msg_flg = 8 ;
      else if ( rec_data == '0' && msg_flg == 8 )// '0' (zero) is recieved
      {
        clear_rx_buffer();//clearing receiving buffer
        msg_flg = 0;
        msg_flag_2 = 0;
        //  send_flag = 0;
        reply_flag = 0;
      }
      else if ( rec_data == '4' && msg_flg == 0  )// '4' (Four) is recieved
      {
        clear_rx_buffer();//clearing receiving buffer
        msg_flg = 0;
        msg_flag_2 = 0;
        //    send_flag = 0;
        reply_flag = 0;
      }
      else if ( Rec_Data == '2' && msg_flg == 0 ) // '2' is recieved,incoming call
      {
        call_flag = 1;
        delay(300);
        Serial.println("ATH");//Command for hang up incomming call,all calls must be filtered no need to answer a call
      }
      else if ( Rec_Data == '0' && msg_flg == 0 && call_flag == 1 ) // '0' (zero) is recieved,call sucessfully rejected
      {
        msg_flg = 0;
        call_flag = 0;
        msg_flag_2 = 0;
        d_count = 0;
        //   send_flag = 0;
        reply_flag = 0;
      }
    }
  }
  i = 0;
  finish = 0; pos_cnt = 0;
}
/*
  This function used to send message
  */
  void send_message(void)
{
  byte msg_flg = 0;
  char rec_data = 0;
  Receive_GPS_Data();
  delay(1000);
  Serial.print("AT+CMGS=");//Command to send message ,(AT+CMGS="+91phone number"<enter>)
  Serial.print('"');
  Serial.print(m_num_my);
  Serial.println('"');
  delay(400);//Delay for GSM module become ready
  while (Serial.available() > 0)
  {
    rec_data = Serial.read();
    if ( rec_data == '>'  ) // '>'(greater than symbol) is recieved while message sending,after AT+CMGD="number" command
    {

      delay(400);//Delay for GSM module become ready
      Serial.println(send_msg[j]);//Transmiting SMS string
      Serial.print("Latitude : ");
      Serial.println(lat);
      Serial.print("Longitude : ");
      Serial.println(lg);
      Serial.println("From - GrayBOX"); //Transmitting whole string to be sent as SMS
      Serial.write(26);//'ctrl+z' command

      delay(5000);//Delay for GSM module become ready
      msg_flg = 0;
    }
    else if ( rec_data == '+' && msg_flg == 0 ) // '+' is recieved
      msg_flg = 1 ;
    else if ( rec_data == 'C' && msg_flg == 1 ) // 'C' is recieved
      msg_flg = 2 ;
    else if ( rec_data == 'M' && msg_flg == 2 ) // 'M' is recieved
      msg_flg = 3 ;
    else if ( rec_data == 'G' && msg_flg == 3 ) // 'M' is recieved
      msg_flg = 4 ;
    else if ( rec_data == 'S' && msg_flg == 4 )//// 'S' is recieved after a sucessful message ("+CMSGS:  ")
      msg_flg = 5 ;
    else if ( rec_data == ':' && msg_flg == 5 )// ':' is recieved
      msg_flg = 6 ;
    else if ( rec_data == 0x0D && msg_flg == 6 )//Carriage return
      msg_flg = 7 ;
    else if ( rec_data == 0x0A && msg_flg == 7 )//Line feed
      msg_flg = 8 ;
    else if ( rec_data == '0' && msg_flg == 8 )// '0' (zero) is recieved
    {
      clear_rx_buffer();//clearing receiving buffer
      msg_flg = 0;
      msg_flag_2 = 0;
      reply_flag = 0;
    }
    else if ( rec_data == '4' && msg_flg == 0  )// '4' (Four) is recieved
    {
      clear_rx_buffer();//clearing receiving buffer
      msg_flg = 0;
      msg_flag_2 = 0;
      reply_flag = 0;
    }
    else if ( Rec_Data == '2' && msg_flg == 0 ) // '2' is recieved,incoming call
    {
      call_flag = 1;
      delay(300);
      Serial.println("ATH");//Command for hang up incomming call,all calls must be filtered no need to answer a call
    }
    else if ( Rec_Data == '0' && msg_flg == 0 && call_flag == 1 ) // '0' (zero) is recieved,call sucessfully rejected
    {
      msg_flg = 0;
      call_flag = 0;
      msg_flag_2 = 0;
      d_count = 0;
      reply_flag = 0;
    }
  }
  finish = 0; pos_cnt = 0;
}
/*
 This function used to initialize GSM module
*/
void modem_initialization(void)
{
  char rec_data;
  byte network_status = 0 ;//network_status initialized as zero
  byte status_check = 0 ;//status_check initialized as zero
  byte gsm_cnt = 0;//gsm_cnt initialized as zero
  byte ok_flag = 0; //ok_flag initialized as zero
  byte count = 0; //count initialized as zero
  clear_rx_buffer();//clearing receiving buffer
  while (gsm_cnt < 5) // repeat entire loop until gsm_cnt less than seven
  {
    switch (gsm_cnt)
    {
      case 0: clear_rx_buffer();//clearing receiving buffer
        Serial.println("AT");// Attention command to wake up GSM modem
        delay(1000);
        break;
      case 1: clear_rx_buffer();//clearing receiving buffer
        Serial.println("ATE0");//Command for disable echo
        delay(1000);
        break;
      case 2: clear_rx_buffer();//clearing receiving buffer
        Serial.println("ATV0");// Command for numeric response after this '0'(zero) will be recieved instead of "OK"
        delay(1000);
        break;
      case 3: clear_rx_buffer();//clearing receiving buffer
        Serial.println("AT&W");// Command TO SAVE SETTINGS
        delay(1000);
        break;
      case 4: gsm_cnt = 5;// exit from the loop
        break;
      default : break;
    }
    while (Serial.available() > 0)
    {
      rec_data = Serial.read();
      if (rec_data == 'O' ) // 'o' is recieved
        ok_flag = 1;
      else if (ok_flag == 1 && rec_data == 'K' ) // 'K' is recieved
      {
        gsm_cnt ++;
        ok_flag = 0;
      }
      else if (rec_data == '0' )// '0'(zero) is recieved (numeric response)
      {
        gsm_cnt ++;
        ok_flag = 0;
      }
      else if (rec_data == '+' )// '+' is recieved message
      {
        clear_rx_buffer();//clearing receiving buffer

        if ( gsm_cnt > 0 )
          gsm_cnt --;
      }
    }
  }
  lcd.setCursor(0, 0);
  lcd.print("GSM Modem Found  ");
  gsm_cnt = 0;
  ok_flag = 0;
  while (network_status == 0 ) //wait for PIN READY
  {
    if (status_check == 0 )
    {
      delay(1000);
      status_check = 1 ;
      clear_rx_buffer();//clearing receiving buffer
      Serial.println("AT+CPIN?"); //checkin PIN return ready(+CPIN: READY) with a valid simcard otherwise error
    }
    while (Serial.available() > 0)
    {
      rec_data = Serial.read();
      if ( rec_data == '+' && status_check == 1 ) // '+' is recieved
        status_check = 2 ;
      else if ( rec_data == 'C' && status_check == 2 ) // 'C' is recieved
        status_check = 3 ;
      else if ( rec_data == 'P' && status_check == 3 ) // 'P' is recieved
        status_check = 4 ;
      else if ( rec_data == 'I' && status_check == 4 ) // 'I' is recieved
        status_check = 5 ;
      else if ( rec_data == 'N' && status_check == 5 ) // 'N' is recieved
        status_check = 6 ;
      else if ( rec_data == ':' && status_check == 6 ) // ':' is recieved
        status_check = 7 ;
      else if ( rec_data == ' ' && status_check == 7 ) // ' ' is recieved
        status_check = 8 ;
      else if ( rec_data == 'R' && status_check == 8 ) // 'R' is recieved
        status_check = 9 ;
      else if ( rec_data == 'E' && status_check == 9 ) // 'E' is recieved
        status_check = 10 ;
      else if ( rec_data == 'A' && status_check == 10 ) // 'A' is recieved
        status_check = 11 ;
      else if ( rec_data == 'D' && status_check == 11 ) // 'D' is recieved
        status_check = 12 ;
      else if ( rec_data == 'Y' && status_check == 12 ) // 'Y' is recieved
        status_check = 13 ;
      else if ( rec_data == 0X0D && status_check == 13 ) //Carriage return
        status_check = 14 ;
      else if ( rec_data == 0X0A && status_check == 14 ) //Line Feed
        status_check = 15 ;
      else if ( rec_data == '0' && status_check == 15 ) // '0' is recieved
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 1; //goto next step
      }
      else if ( rec_data != 'R' && status_check == 8 ) //+CPIN: NOT READY
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 0; //repeat current step
      }
      else if ( rec_data == 'M' && status_check == 3 ) // in case of any message
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 0; //repeat current step
      }

    }

  }
  lcd.setCursor(0, 0);
  lcd.print("CPIN: Ready         ");
  while (network_status == 1 ) //wait for SIM network registration
  {
    if (status_check == 0 )
    {
      delay(1000);
      status_check = 1 ;
      clear_rx_buffer();//clearing receiving buffer
      Serial.println("AT+CREG?"); //checking for SIM card registration ,if registerd "+CREG: 0,1" will receive
    }
    while (Serial.available() > 0)
    {
      rec_data = Serial.read();
      if ( rec_data == '+' && status_check == 1 ) // '+' is recieved
        status_check = 2 ;
      else if ( rec_data == 'C' && status_check == 2 ) // 'C' is recieved
        status_check = 3 ;
      else if ( rec_data == 'R' && status_check == 3 ) // 'R' is recieved
        status_check = 4 ;
      else if ( rec_data == 'E' && status_check == 4 ) // 'E' is recieved
        status_check = 5 ;
      else if ( rec_data == 'G' && status_check == 5 ) // 'G' is recieved
        status_check = 6 ;
      else if ( rec_data == ':' && status_check == 6 ) // ':' is recieved
        status_check = 7 ;
      else if ( rec_data == ' ' && status_check == 7 ) // ' ' is recieved
        status_check = 8 ;
      else if ( rec_data == '0' && status_check == 8 ) // '0' is recieved
        status_check = 9 ;
      else if ( rec_data == ',' && status_check == 9 ) // ',' is recieved
        status_check = 10 ;
      else if ( rec_data == '1' && status_check == 10 ) // '1' is recieved
        status_check = 11 ;
      else if ( rec_data == 0X0D && status_check == 11 ) //Carriage return
        status_check = 12 ;
      else if ( rec_data == 0X0A && status_check == 12 ) //Line Feed
        status_check = 13 ;
      else if ( rec_data == '0' && status_check == 13 ) // '0' is recieved
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 2; //goto next step
      }
      else if ( rec_data != '1' && status_check == 10 ) // +CREG: 0,2 not registered
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 1; //repeat current step
      }
      else if ( rec_data == 'M' && status_check == 3 ) // in case of any message
      {
        clear_rx_buffer();//clearing receiving buffer
        status_check = 0 ;
        network_status = 1; //repeat current step
      }

    }

  }
  gsm_cnt = 0;
  lcd.setCursor(0, 0);
  lcd.print("Registration Ok       ");
  while (gsm_cnt < 4) // repeat entire loop until gsm_cnt less than nine
  {
    switch (gsm_cnt)
    {
      case 0: clear_rx_buffer();//clearing receiving buffer
        Serial.println("AT+CMGF=1");// Attention command to wake up GSM modem
        delay(1000);
        break;
      case 1: clear_rx_buffer();//clearing receiving buffer
        Serial.println("AT+CNMI=2,1,0,0,0");//Command to configure new message indication
        delay(1000);
        break;
      case 2: clear_rx_buffer();//clearing receiving buffer
        Serial.println("AT+CMGD=1,4");// Command to delete all received messages
        delay(1000);
        break;
      case 3: gsm_cnt = 4;// exit from the loop
        break;
      default : break;
    }
    while (Serial.available() > 0)
    {
      rec_data = Serial.read();
      if (rec_data == '0' )// '0'(zero) is recieved (numeric response)
      {
        gsm_cnt ++;
      }
      else if (rec_data == '+'  )// '+' recieved ,before "AT+CIICR" command,may be any message
      {
        clear_rx_buffer();//clearing receiving buffer
        if ( gsm_cnt > 0 )
          gsm_cnt --;
      }

      else if (rec_data == '4' && gsm_cnt > 2)// '4' recieved (error),in gprs initialisation commands
      {
        clear_rx_buffer();//clearing receiving buffer
        gsm_cnt = 4;
      }
    }
  }
  gsm_cnt = 0;
}
/*
  This function used to receive GPS data
*/
void Receive_GPS_Data()
{
  while (finish == 0)
  {
    while (mySerial.available() > 0)       // Check GPS data
    {
      Gpsdata = mySerial.read();
      flg = 1;
      if ( Gpsdata == '$' && pos_cnt == 0) // finding GPRMC header
        pos_cnt = 1;
      if ( Gpsdata == 'G' && pos_cnt == 1)
        pos_cnt = 2;
      if ( Gpsdata == 'P' && pos_cnt == 2)
        pos_cnt = 3;
      if ( Gpsdata == 'R' && pos_cnt == 3)
        pos_cnt = 4;
      if ( Gpsdata == 'M' && pos_cnt == 4)
        pos_cnt = 5;
      if ( Gpsdata == 'C' && pos_cnt == 5 )
        pos_cnt = 6;
      if (pos_cnt == 6 &&  Gpsdata == ',') // count commas in message
      {
        com_cnt++;
        flg = 0;
      }
      if (com_cnt == 3 && flg == 1)
      {
        lat[lat_cnt++] =  Gpsdata;         // latitude
        flg = 0;
      }

      if (com_cnt == 5 && flg == 1)
      {
        lg[log_cnt++] =  Gpsdata;         // Longitude
        flg = 0;
      }

      if ( Gpsdata == '*' && com_cnt >= 5)
      {
        com_cnt = 0;                      // end of GPRMC message
        lat_cnt = 0;
        log_cnt = 0;
        flg     = 0;
        finish  = 1;

      }
    }
  }
}
 /*

This function used to clear receiveing buffer

 */
void clear_rx_buffer(void)
{
  char rec_data = 0;
  while (Serial.available() > 0)
    rec_data = Serial.read();
}
 /*

This function used to read message from GSM moule (only if any message is available )

 */
 void gsm_read_message(void)
{
  while (Serial.available() > 0)
  {
    Rec_Data = Serial.read();
    if ( Rec_Data == '+'  && msg_flg == 0 ) // + is recieved
      msg_flg = 1;
    else if ( Rec_Data == 'C' && msg_flg == 1 ) // C is recieved
      msg_flg = 2;
    else if ( Rec_Data == 'M' && msg_flg == 2 ) // M is recieved
      msg_flg = 3;
    else if ( Rec_Data == 'T' && msg_flg == 3 ) // T is recieved
      msg_flg = 4;
    else if ( Rec_Data == 'I' && msg_flg == 4 ) // I is recieved 
    {
      clear_rx_buffer();//clearing receiving buffer
      Rec_Data = 0;
      msg_flg = 0;
      delay(300);//Delay for GSM module become ready
      array_clear();//Clear both message and number arrays
      Serial.println("AT+CMGR=1");//Command for message read from location one
      i = 0; j = 0;
    }
    else if ( Rec_Data == 'G' && msg_flg == 3 ) // G is recieved
      msg_flg = 4;
    else if ( Rec_Data == 'R' && msg_flg == 4 ) // R is recieved,Readind message
      msg_flg = 5;
    else if ( Rec_Data == ':' && msg_flg == 5 ) // : is recieved
      msg_flg = 6;
    else if ( Rec_Data == '"' && msg_flg == 6  ) // Counting double quotes
      d_count++;
    else if ( Rec_Data != '"' && d_count == 3 && msg_flg == 6) // Saving number to message array from between third and fourth double quotes
      number[i++] = Rec_Data;
    else if ( Rec_Data == 0X0D && msg_flg == 6) //Carriage return
      msg_flg = 7;
    else if ( Rec_Data == 0X0A && msg_flg == 7) //Line feed
      msg_flg = 8;
    else if ( Rec_Data == '*' && d_count >= 5 &&  msg_flg == 8 ) //Start symbol * is recieved
      msg_flag_2 = 1;
    else if ( Rec_Data != '#' && msg_flag_2 == 1 &&  msg_flg == 8 && Rec_Data != 0X0D && Rec_Data != 0X0A ) //Data between start and stop symbols were saved to message array
      message[j++] = Rec_Data;
    else if ( Rec_Data == '#' && msg_flag_2 == 1 &&  msg_flg == 8) //Stop symbol # is recieved
    {
      msg_flag_2 = 2;
      number[i] = '\0';
      message[j] = '\0';
      i = 0; j = 0;
    }
    else if (Rec_Data == 0X0D && msg_flg == 8) //Carriage return 
    {
      clear_rx_buffer();//clearing receiving buffer
      msg_flg = 0;
      delete_flag = 1;
      delay(300);//Delay for GSM module become ready
      Serial.println("AT+CMGD=1,4");// Command for delete all messages in SIM card
    }
    else if ( Rec_Data == '0' && msg_flg == 0 && delete_flag == 1 ) //Response for delete command ,sucess all messages were deleted
    {
      if ( msg_flag_2 == 2 )
        reply_flag = 1;//If the message have start and stop symbols it must be checked otherwise no need to check the recieved message
      else
        reply_flag = 0;//No need to check recieved message
      msg_flg = 0;
      msg_flag_2 = 0;
      d_count = 0;
      delete_flag = 0;
    }
    else if ( Rec_Data == '2' && msg_flg == 0 ) // 2 is recieved,incoming call
    {
      call_flag = 1;
      delay(300);
      Serial.println("ATH");//Command for hang up incomming call,all calls must be filtered no need to answer a call
    }
    else if ( Rec_Data == '0' && msg_flg == 0 && call_flag == 1 ) // '0' (zero) is recieved,call sucessfully rejected
    {
      msg_flg = 0;
      call_flag = 0;
      msg_flag_2 = 0;
      d_count = 0;
      reply_flag = 0;
    }
    else if ( (Rec_Data == '3' || Rec_Data == '4' || Rec_Data == '7'  ) && msg_flg == 0 ) //incase of any error,nocarrier and busy
    {
      msg_flg = 0;
      call_flag = 0;
      msg_flag_2 = 0;
      d_count = 0;
      reply_flag = 0;
    }
  }
}
 

//This function used to clearing message and number arrays

 void array_clear(void)
{
  byte k = 0;
  for ( k = 0; k < 15; k++)
    number[k] = '\0';
  for ( k = 0; k < 160; k++)
    message[k] = '\0';
}
